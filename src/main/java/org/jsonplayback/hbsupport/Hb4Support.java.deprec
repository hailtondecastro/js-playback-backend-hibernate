package org.jsonplayback.hbsupport;

import java.lang.reflect.Method;
import java.sql.Connection;
import java.util.Collection;
import java.util.concurrent.atomic.AtomicReference;

import org.hibernate.proxy.HibernateProxy;
import org.jsonplayback.player.IPlayerManager;

public class Hb4Support implements HbSupport {
	private IPlayerManager manager;
	public Hb4Support(IPlayerManager manager) {
		this.manager = manager;
		try {
			this.persistentCollecitonClass = Class.forName("org.hibernate.collection.spi.PersistentCollection");
		} catch (ClassNotFoundException e) {
			throw new RuntimeException("org.hibernate.collection.PersistentCollection not found", e);
		}
		try {
			this.persistentCollectionWasInitialized = this.persistentCollecitonClass.getMethod("wasInitialized", new Class<?>[]{});
		} catch (NoSuchMethodException e) {
			throw new RuntimeException("org.hibernate.collection.PersistentCollection.wasInitialized() not found", e);
		}
		
	}
	
	private Class<?> persistentCollecitonClass;
	private Method persistentCollectionWasInitialized;
	private Method persistentCollectionGetOwner;
	
	@Override
	public boolean isPersistentCollection(Object coll) {
		return persistentCollecitonClass.isAssignableFrom(coll.getClass());
	}

	@Override
	public boolean isCollectionLazyUnitialized(Object coll) {
		try {
			return !((boolean)persistentCollectionWasInitialized.invoke(coll));
		} catch (ReflectiveOperationException e) {
			throw new RuntimeException("org.hibernate.collection.PersistentCollection.wasInitialized(). This should not happen", e);
		}
	}
	
	@Override
	public Object getCollectionOwner(Object coll) {
		try {
			return persistentCollectionGetOwner.invoke(coll);
		} catch (ReflectiveOperationException e) {
			throw new RuntimeException("This should not happen", e);
		}
	}

	@Override
	public boolean isHibernateProxyLazyUnitialized(Object hProxy) {
		return ((HibernateProxy) hProxy).getHibernateLazyInitializer().isUninitialized();
	}

	@Override
	public Connection getConnection() {
		final AtomicReference<Connection> connRef = new AtomicReference<>();
		this.manager.getConfig().getSessionFactory().getCurrentSession().doWork(connection -> {
			connRef.set(connection);
		});
		return connRef.get();
	}

}
